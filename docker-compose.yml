services:
  nginx-proxy:
    image: jwilder/nginx-proxy
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./certs:/etc/nginx/certs
      - ./vhost:/etc/nginx/vhost.d
      - ./html:/usr/share/nginx/html

  nginx-proxy-acme:
    image: nginxproxy/acme-companion
    container_name: nginx-proxy-acme
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./certs:/etc/nginx/certs
      - ./vhost:/etc/nginx/vhost.d
      - ./html:/usr/share/nginx/html
      - ./acme:/etc/acme.sh
    environment:
      - DEFAULT_EMAIL=${ACME_EMAIL}
      - NGINX_PROXY_CONTAINER=nginx-proxy

  client:
    image: ghcr.io/utsc-cscc09-programming-on-the-web/uofteam-board-client
    container_name: client
    restart: always
    expose:
      - 80
    environment:
      - VIRTUAL_HOST=${CLIENT_SSL_HOSTS}
      - LETSENCRYPT_HOST=${CLIENT_SSL_HOSTS}

  server:
    image: ghcr.io/utsc-cscc09-programming-on-the-web/uofteam-board-server
    container_name: server
    restart: always
    expose:
      - 3000
    environment:
      - VIRTUAL_HOST=${SERVER_SSL_HOSTS}
      - LETSENCRYPT_HOST=${SERVER_SSL_HOSTS}
      - PORT=${SERVER_PORT}
      - SECRET_KEY=${SERVER_SESSION_SECRET}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - CORS_CLIENT_URLS=${CLIENT_ORIGIN_URLS}
      - REDIRECT_URL=${GOOGLE_REDIRECT_URL}
      - CLIENT_URL=${CLIENT_URL}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_NAME=${DB_NAME}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - STRIPE_API_SECRET=${STRIPE_API_SECRET}
      - REDIS_PASS=${REDIS_PASS}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    depends_on:
      postgresdb:
        condition: service_healthy
      rediscache:
        condition: service_healthy

  postgresdb:
    image: postgres:17
    container_name: postgresdb
    restart: always
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  rediscache:
    image: redis:8
    container_name: rediscache
    restart: always
    environment:
      - REDIS_PASSWORD=${REDIS_PASS}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

volumes:
  postgres_data:
  redis_data:
